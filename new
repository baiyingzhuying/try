void doFuncDef(int u)
{
    offset = 8;
    isFirst = false;
    State state = node[u].state;
    codes.push_back("\t.globl\t" + state[1]);
    codes.push_back(state[1] + ":\n\tpushq\t%rbp");
    S.emplace();
    S.top().insert("%rbx");
    codes.push_back("\tpushq\t%rbx\n\tpushq\t%rcx");
    for (int i = 8; i <= 15; i++)
    {
        string regv = "%r" + to_string(i);
        codes.push_back("\tpushq\t" + regv);
        S.top().insert(regv);
    }
    codes.push_back("\tmovq\t%rsp, %rbp\n\tsubq\t$32, %rsp");
    varMap.emplace_back();
    auto vars = doFuncFParams(node[u].son[0], offset);
    for (int i = 0; i < vars.size(); i++)
    {
        auto var = vars[i];
        if (var.name.empty())
            continue;
        varMap[varMap.size() - 1][var.name] = var;
        int size = var.size / 16 * 16 + 16;
        codes.push_back("\tsubq\t$" + to_string(size) + ", %rsp");
        if (!i)
            codes.push_back("\tmovq\t %rdi, " + to_string(-offset) + "(%rbp)");
        else
            codes.push_back("\tmovq\t %rsi, " + to_string(-offset) + "(%rbp)");
        offset += size;
    }
    doBlock(node[u].son[1], false);
    if (state[0] == "void")
        {for (int i = 15; i >= 8; i--)
        codes.push_back("\tpopq\t %r" + to_string(i));
    codes.push_back("\tpopq\t%rcx\n\tpopq\t%rbx\n");}
    codes.push_back("\tmovq\t%rbp, %rsp");
    for (int i = 15; i >= 8; i--)
        codes.push_back("\tpopq\t %r" + to_string(i));
    codes.push_back("\tpopq\t%rcx\n\tpopq\t%rbx");
    S.pop();
    codes.push_back("\tpopq\t%rbp\n\tret");
}
